services:
  frontend:
    container_name: foodgram-front
    build:
      context: ../frontend
    volumes:
      - ../frontend/:/app/result_build/

  db:
    container_name: foodgram-db
    image: postgres:13.11-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-foodgram}
      POSTGRES_USER: ${POSTGRES_USER:-foodgram}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-foodgram}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-foodgram} -d ${POSTGRES_DB:-foodgram}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    container_name: foodgram-backend
    build:
      context: ../backend
    restart: unless-stopped
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-not-secure-development-key}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1}
      DJANGO_CSRF_TRUSTED_ORIGINS: ${DJANGO_CSRF_TRUSTED_ORIGINS:-http://localhost,http://127.0.0.1}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-false}
      DJANGO_USE_SQLITE: "false"
      POSTGRES_DB: ${POSTGRES_DB:-foodgram}
      POSTGRES_USER: ${POSTGRES_USER:-foodgram}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-foodgram}
      POSTGRES_HOST: db
      POSTGRES_PORT: "5432"
    volumes:
      - static_volume:/app/collected_static
      - media_volume:/app/media
      - ../data:/data:ro
    depends_on:
      db:
        condition: service_healthy

  nginx:
    container_name: foodgram-proxy
    image: nginx:1.25.4-alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ../frontend/build:/usr/share/nginx/html/
      - ../docs/:/usr/share/nginx/html/api/docs/
      - static_volume:/var/www/static/
      - media_volume:/var/www/media/
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  static_volume:
  media_volume:
